<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LOL自动挂机</name>
    </assembly>
    <members>
        <member name="T:MyCSharp.FormMain">
            <summary>
            
            </summary>
        </member>
        <member name="M:MyCSharp.FormMain.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="F:MyCSharp.FormMain.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:MyCSharp.FormMain.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:MyCSharp.FormMain.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="M:MyCSharp.Program.Main">
            <summary>
            应用程序的主入口点。
            </summary>
        </member>
        <member name="T:My.Security">
            <summary>
            编码与解码函数
            </summary>
        </member>
        <member name="M:My.Security.URL_Encode(System.String,System.Boolean)">
            <summary>
            URL编码（例如，"微软.NET"的编码结果为"%e5%be%ae%e8%bd%af.NET"）
            </summary>
            <param name="Source">要加密的字符串</param>
            <param name="ToUpper">是否将结果转换为大写字母形式</param>
            <returns>加密后的结果字符串</returns>
        </member>
        <member name="M:My.Security.URL_Encode(System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            URL编码（例如，"微软.NET"的编码结果为"%e5%be%ae%e8%bd%af.NET"）
            </summary>
            <param name="Source">要加密的字符串</param>
            <param name="Encoding">使用的编码格式（默认UTF-8）</param>
            <param name="ToUpper">是否将结果转换为大写字母形式</param>
            <returns>加密后的结果字符串</returns>
        </member>
        <member name="M:My.Security.URL_Decode(System.String)">
            <summary>
            URL解码（大小写形式都可以识别）
            </summary>
            <param name="Source">要解密的字符串</param>
            <returns>解密后的结果字符串</returns>
        </member>
        <member name="M:My.Security.URL_Decode(System.String,System.Text.Encoding)">
            <summary>
            URL解码（大小写形式都可以识别）
            </summary>
            <param name="Source">要解密的字符串</param>
            <param name="Encoding">使用的编码格式（默认UTF-8）</param>
            <returns>解密后的结果字符串</returns>
        </member>
        <member name="M:My.Security.Base64_Encode(System.String)">
            <summary>
            Base64加密算法（加密结果的字符串中包含字母A-Z，a-z，数字0-9，符号+/=）
            </summary>
            <param name="Source">要加密的字符串</param>
            <returns>加密后的结果字符串</returns>
        </member>
        <member name="M:My.Security.Base64_Encode(System.String,System.Text.Encoding)">
            <summary>
            Base64加密算法（加密结果的字符串中包含字母A-Z，a-z，数字0-9，符号+/=）
            </summary>
            <param name="Source">要加密的字符串</param>
            <param name="Encoding">使用的编码格式（默认UTF-8）</param>
            <returns>加密后的结果字符串</returns>
        </member>
        <member name="M:My.Security.Base64_URL_Encode(System.String)">
            <summary>
            Base64加密算法（用于URL的改进Base64编码，加密结果的字符串中包含字母A-Z，a-z，数字0-9，符号-_=）
            </summary>
            <param name="Source">要加密的字符串</param>
            <returns>加密后的结果字符串</returns>
        </member>
        <member name="M:My.Security.Base64_URL_Encode(System.String,System.Text.Encoding)">
            <summary>
            Base64加密算法（用于URL的改进Base64编码，加密结果的字符串中包含字母A-Z，a-z，数字0-9，符号-_=）
            </summary>
            <param name="Source">要加密的字符串</param>
            <param name="Encoding">使用的编码格式（默认UTF-8）</param>
            <returns>加密后的结果字符串</returns>
        </member>
        <member name="M:My.Security.Base64_Decode(System.String)">
            <summary>
            Base64解密算法（要解密的字符串可以包含字母A-Z，a-z，数字0-9，符号+/=）
            </summary>
            <param name="Source">要解密的字符串</param>
            <returns>解密后的结果字符串</returns>
        </member>
        <member name="M:My.Security.Base64_Decode(System.String,System.Text.Encoding)">
            <summary>
            Base64解密算法（要解密的字符串可以包含字母A-Z，a-z，数字0-9，符号+/=）
            </summary>
            <param name="Source">要解密的字符串</param>
            <param name="Encoding">使用的编码格式（默认UTF-8）</param>
            <returns>解密后的结果字符串</returns>
        </member>
        <member name="M:My.Security.Base64_URL_Decode(System.String)">
            <summary>
            Base64解密算法（用于URL的改进Base64解码，要解密的字符串可以包含字母A-Z，a-z，数字0-9，符号-_=）
            </summary>
            <param name="Source">要解密的字符串</param>
            <returns>解密后的结果字符串</returns>
        </member>
        <member name="M:My.Security.Base64_URL_Decode(System.String,System.Text.Encoding)">
            <summary>
            Base64解密算法（用于URL的改进Base64解码，要解密的字符串可以包含字母A-Z，a-z，数字0-9，符号-_=）
            </summary>
            <param name="Source">要解密的字符串</param>
            <param name="Encoding">使用的编码格式（默认UTF-8）</param>
            <returns>解密后的结果字符串</returns>
        </member>
        <member name="M:My.Security.MD5_Lower16_Encode(System.String)">
            <summary>
            MD5加密算法（返回16位小写结果）
            </summary>
            <param name="Source">要加密的字符串</param>
            <returns>加密后的结果字符串</returns>
        </member>
        <member name="M:My.Security.MD5_Upper16_Encode(System.String)">
            <summary>
            MD5加密算法（返回16位大写结果）
            </summary>
            <param name="Source">要加密的字符串</param>
            <returns>加密后的结果字符串</returns>
        </member>
        <member name="M:My.Security.MD5_Lower32_Encode(System.String)">
            <summary>
            MD5加密算法（返回32位小写结果）
            </summary>
            <param name="Source">要加密的字符串</param>
            <returns>加密后的结果字符串</returns>
        </member>
        <member name="M:My.Security.MD5_Upper32_Encode(System.String)">
            <summary>
            MD5加密算法（返回32位大写结果）
            </summary>
            <param name="Source">要加密的字符串</param>
            <returns>加密后的结果字符串</returns>
        </member>
        <member name="M:My.Security.SHA1_Lower40_Encode(System.String)">
            <summary>
            SHA1加密算法（返回40位小写结果）
            </summary>
            <param name="Source">要加密的字符串</param>
            <returns>加密后的结果字符串</returns>
        </member>
        <member name="M:My.Security.SHA1_Upper40_Encode(System.String)">
            <summary>
            SHA1加密算法（返回40位大写结果）
            </summary>
            <param name="Source">要加密的字符串</param>
            <returns>加密后的结果字符串</returns>
        </member>
        <member name="M:My.Security.SHA256_Lower64_Encode(System.String)">
            <summary>
            SHA256加密算法（返回64位小写结果）
            </summary>
            <param name="Source">要加密的字符串</param>
            <returns>加密后的结果字符串</returns>
        </member>
        <member name="M:My.Security.SHA256_Upper64_Encode(System.String)">
            <summary>
            SHA256加密算法（返回64位大写结果）
            </summary>
            <param name="Source">要加密的字符串</param>
            <returns>加密后的结果字符串</returns>
        </member>
        <member name="M:My.Security.SHA384_Lower96_Encode(System.String)">
            <summary>
            SHA384加密算法（返回96位小写结果）
            </summary>
            <param name="Source">要加密的字符串</param>
            <returns>加密后的结果字符串</returns>
        </member>
        <member name="M:My.Security.SHA384_Upper96_Encode(System.String)">
            <summary>
            SHA384加密算法（返回96位大写结果）
            </summary>
            <param name="Source">要加密的字符串</param>
            <returns>加密后的结果字符串</returns>
        </member>
        <member name="M:My.Security.SHA512_Lower128_Encode(System.String)">
            <summary>
            SHA512加密算法（返回128位小写结果）
            </summary>
            <param name="Source">要加密的字符串</param>
            <returns>加密后的结果字符串</returns>
        </member>
        <member name="M:My.Security.SHA512_Upper128_Encode(System.String)">
            <summary>
            SHA512加密算法（返回128位大写结果）
            </summary>
            <param name="Source">要加密的字符串</param>
            <returns>加密后的结果字符串</returns>
        </member>
        <member name="M:My.Security.DES_Encode(System.String,System.String)">
            <summary>
            DES加密算法
            </summary>
            <param name="Source">要加密的字符串</param>
            <param name="SecretKey">加密密钥（8的整数倍字节数的字符串）</param>
            <returns>加密后的结果字符串</returns>
        </member>
        <member name="M:My.Security.DES_Decode(System.Byte[],System.String)">
            <summary>
            DES解密算法
            </summary>
            <param name="Source">要解密的字符串</param>
            <param name="SecretKey">解密密钥（8的整数倍字节数的字符串）</param>
            <returns>解密后的结果字符串</returns>
        </member>
        <member name="M:My.Security.RSA_Encode(System.String)">
            <summary>
            RSA加密算法
            </summary>
            <param name="Source">要加密的字符串</param>
            <returns>加密后的结果字符串</returns>
        </member>
        <member name="M:My.Security.RSA_Decode(System.Byte[])">
            <summary>
            RSA解密算法
            </summary>
            <param name="Source">要解密的字符串</param>
            <returns>解密后的结果字符串</returns>
        </member>
        <member name="T:My.Http">
            <summary>
            网络访问函数
            </summary>
        </member>
        <member name="M:My.Http.GetString(System.String)">
            <summary>
            获取网页源码
            </summary>
            <param name="URL">网页链接</param>
            <returns>网页源码字符串</returns>
        </member>
        <member name="M:My.Http.GetString(System.String,System.Text.Encoding)">
            <summary>
            获取网页源码
            </summary>
            <param name="URL">网页链接</param>
            <param name="Encoding">使用的编码格式（默认UTF-8）</param>
            <returns>网页源码字符串</returns>
        </member>
        <member name="M:My.Http.DownloadFile(System.String,System.String)">
            <summary>
            下载文件到磁盘
            </summary>
            <param name="URL">文件链接</param>
            <param name="FilePath">文件保存路径（可以是相对路径）</param>
            <returns>是否下载成功</returns>
        </member>
        <member name="T:My.IO">
            <summary>
            磁盘读写函数
            </summary>
        </member>
        <member name="M:My.IO.ReadString(System.String)">
            <summary>
            读取文件为字符串
            </summary>
            <param name="FilePath">文件路径</param>
            <returns>字符串（读取失败返回空字符串""）</returns>
        </member>
        <member name="M:My.IO.WriteString(System.String,System.String)">
            <summary>
            将字符串写入文件（覆盖）
            </summary>
            <param name="Source">字符串</param>
            <param name="FilePath">文件路径</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:My.IO.AppendString(System.String,System.String)">
            <summary>
            将字符串写入文件（追加）
            </summary>
            <param name="Source">字符串</param>
            <param name="FilePath">文件路径</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:My.IO.SaveStringArray(System.Collections.ArrayList@,System.String)">
            <summary>
            将字符串数组写入文件
            </summary>
            <param name="StringArray">字符串数组</param>
            <param name="FilePath">文件路径（可以是相对路径）</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:My.IO.SaveStringArray(System.Collections.ArrayList@,System.String,System.Text.Encoding)">
            <summary>
            将字符串数组写入文件
            </summary>
            <param name="StringArray">字符串数组</param>
            <param name="FilePath">文件路径（可以是相对路径）</param>
            <param name="Encoding">使用的编码格式（默认UTF-8）</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:My.IO.SaveStringArray(System.Collections.Generic.List{System.String}@,System.String)">
            <summary>
            将字符串数组写入文件
            </summary>
            <param name="StringArray">字符串数组</param>
            <param name="FilePath">文件路径（可以是相对路径）</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:My.IO.SaveStringArray(System.Collections.Generic.List{System.String}@,System.String,System.Text.Encoding)">
            <summary>
            将字符串数组写入文件
            </summary>
            <param name="StringArray">字符串数组</param>
            <param name="FilePath">文件路径（可以是相对路径）</param>
            <param name="Encoding">使用的编码格式（默认UTF-8）</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:My.IO.SaveStringArray(System.String[]@,System.String)">
            <summary>
            将字符串数组写入文件
            </summary>
            <param name="StringArray">字符串数组</param>
            <param name="FilePath">文件路径（可以是相对路径）</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:My.IO.SaveStringArray(System.String[]@,System.String,System.Text.Encoding)">
            <summary>
            将字符串数组写入文件
            </summary>
            <param name="StringArray">字符串数组</param>
            <param name="FilePath">文件路径（可以是相对路径）</param>
            <param name="Encoding">使用的编码格式（默认UTF-8）</param>
            <returns>是否写入成功</returns>
        </member>
        <member name="M:My.IO.ReadStringArray(System.Collections.ArrayList@,System.String)">
            <summary>
            读取文件中的字符串数组
            </summary>
            <param name="StringArray">字符串数组</param>
            <param name="FilePath">文件路径（可以是相对路径）</param>
            <returns>是否读取成功</returns>
        </member>
        <member name="M:My.IO.ReadStringArray(System.Collections.ArrayList@,System.String,System.Text.Encoding)">
            <summary>
            读取文件中的字符串数组
            </summary>
            <param name="StringArray">字符串数组</param>
            <param name="FilePath">文件路径（可以是相对路径）</param>
            <param name="Encoding">使用的编码格式（默认UTF-8）</param>
            <returns>是否读取成功</returns>
        </member>
        <member name="M:My.IO.ReadStringArray(System.Collections.Generic.List{System.String}@,System.String)">
            <summary>
            读取文件中的字符串数组
            </summary>
            <param name="StringArray">字符串数组</param>
            <param name="FilePath">文件路径（可以是相对路径）</param>
            <returns>是否读取成功</returns>
        </member>
        <member name="M:My.IO.ReadStringArray(System.Collections.Generic.List{System.String}@,System.String,System.Text.Encoding)">
            <summary>
            读取文件中的字符串数组
            </summary>
            <param name="StringArray">字符串数组</param>
            <param name="FilePath">文件路径（可以是相对路径）</param>
            <param name="Encoding">使用的编码格式（默认UTF-8）</param>
            <returns>是否读取成功</returns>
        </member>
        <member name="M:My.IO.ReadStringArray(System.String[]@,System.String)">
            <summary>
            读取文件中的字符串数组
            </summary>
            <param name="StringArray">字符串数组</param>
            <param name="FilePath">文件路径（可以是相对路径）</param>
            <returns>是否读取成功</returns>
        </member>
        <member name="M:My.IO.ReadStringArray(System.String[]@,System.String,System.Text.Encoding)">
            <summary>
            读取文件中的字符串数组
            </summary>
            <param name="StringArray">字符串数组</param>
            <param name="FilePath">文件路径（可以是相对路径）</param>
            <param name="Encoding">使用的编码格式（默认UTF-8）</param>
            <returns>是否读取成功</returns>
        </member>
        <member name="M:My.IO.GetAllFilePath(System.Collections.Generic.List{System.String}@,System.String)">
            <summary>
            获取指定目录下的全部的文件
            </summary>
            <param name="FilePathArray">保存文件路径的字符串数组</param>
            <param name="SearchDirectory">要搜索的文件夹路径</param>
            <returns>是否获取成功</returns>
        </member>
        <member name="M:My.IO.GetFileLine(System.Int32@,System.String)">
            <summary>
            获取指定文件的行数
            </summary>
            <param name="FileLine">文件行数</param>
            <param name="FilePath">文件路径（可以是相对路径）</param>
            <returns>是否获取成功</returns>
        </member>
        <member name="M:My.IO.GetFileLine(System.Int32@,System.String,System.Text.Encoding)">
            <summary>
            获取指定文件的行数
            </summary>
            <param name="FileLine">文件行数</param>
            <param name="FilePath">文件路径（可以是相对路径）</param>
            <param name="Encoding">使用的编码格式（默认UTF-8）</param>
            <returns>是否获取成功</returns>
        </member>
        <member name="M:My.IO.WriteResourceFile(System.String,System.String)">
            <summary>
            将程序嵌入的资源文件写入为磁盘文件（注意必须在解决方案资源管理器中，将资源文件的"属性"-"生成操作"设置为"嵌入的资源"）
            </summary>
            <param name="ResourceName">资源文件名称（注意这个参数的值为资源文件在工程内的相对路径，例如A.jpg文件在Resources文件夹内，则此处的参数应为"Resources.A.jpg"）</param>
            <param name="FilePath">写入到磁盘的文件路径</param>
            <returns>是否执行成功</returns>
        </member>
        <member name="M:My.IO.ReadResourcePicture(System.Drawing.Bitmap@,System.String)">
            <summary>
            读取程序嵌入的图片类型的资源文件（注意必须在解决方案资源管理器中，将资源文件的"属性"-"生成操作"设置为"嵌入的资源"）
            </summary>
            <param name="ResourcePicture">图片</param>
            <param name="ResourceName">资源文件名称（注意这个参数的值为资源文件在工程内的相对路径，例如A.jpg文件在Resources文件夹内，则此处的参数应为"Resources.A.jpg"）</param>
            <returns>是否读取成功</returns>
        </member>
        <member name="M:My.IO.ReadResourceString(System.String@,System.String)">
            <summary>
            读取程序嵌入的文本类型的资源文件（注意必须在解决方案资源管理器中，将资源文件的"属性"-"生成操作"设置为"嵌入的资源"）
            </summary>
            <param name="ResourceString">文本</param>
            <param name="ResourceName">资源文件名称（注意这个参数的值为资源文件在工程内的相对路径，例如A.jpg文件在Resources文件夹内，则此处的参数应为"Resources.A.jpg"）</param>
            <returns>是否读取成功</returns>
        </member>
        <member name="M:My.IO.ReadResourceString(System.String@,System.String,System.Text.Encoding)">
            <summary>
            读取程序嵌入的文本类型的资源文件（注意必须在解决方案资源管理器中，将资源文件的"属性"-"生成操作"设置为"嵌入的资源"）
            </summary>
            <param name="ResourceString">文本</param>
            <param name="ResourceName">资源文件名称（注意这个参数的值为资源文件在工程内的相对路径，例如A.jpg文件在Resources文件夹内，则此处的参数应为"Resources.A.jpg"）</param>
            <param name="Encoding">使用的编码格式（默认UTF-8）</param>
            <returns>是否读取成功</returns>
        </member>
        <member name="M:My.IO.ReadResourceArray(System.Collections.ArrayList@,System.String)">
            <summary>
            读取程序嵌入的字符串数组类型的资源文件（注意必须在解决方案资源管理器中，将资源文件的"属性"-"生成操作"设置为"嵌入的资源"）
            </summary>
            <param name="ResourceArray">字符串数组</param>
            <param name="ResourceName">资源文件名称（注意这个参数的值为资源文件在工程内的相对路径，例如A.jpg文件在Resources文件夹内，则此处的参数应为"Resources.A.jpg"）</param>
            <returns>是否读取成功</returns>
        </member>
        <member name="M:My.IO.ReadResourceArray(System.Collections.ArrayList@,System.String,System.Text.Encoding)">
            <summary>
            读取程序嵌入的字符串数组类型的资源文件（注意必须在解决方案资源管理器中，将资源文件的"属性"-"生成操作"设置为"嵌入的资源"）
            </summary>
            <param name="ResourceArray">字符串数组</param>
            <param name="ResourceName">资源文件名称（注意这个参数的值为资源文件在工程内的相对路径，例如A.jpg文件在Resources文件夹内，则此处的参数应为"Resources.A.jpg"）</param>
            <param name="Encoding">使用的编码格式（默认UTF-8）</param>
            <returns>是否读取成功</returns>
        </member>
        <member name="M:My.IO.ReadResourceArray(System.Collections.Generic.List{System.String}@,System.String)">
            <summary>
            读取程序嵌入的字符串数组类型的资源文件（注意必须在解决方案资源管理器中，将资源文件的"属性"-"生成操作"设置为"嵌入的资源"）
            </summary>
            <param name="ResourceArray">字符串数组</param>
            <param name="ResourceName">资源文件名称（注意这个参数的值为资源文件在工程内的相对路径，例如A.jpg文件在Resources文件夹内，则此处的参数应为"Resources.A.jpg"）</param>
            <returns>是否读取成功</returns>
        </member>
        <member name="M:My.IO.ReadResourceArray(System.Collections.Generic.List{System.String}@,System.String,System.Text.Encoding)">
            <summary>
            读取程序嵌入的字符串数组类型的资源文件（注意必须在解决方案资源管理器中，将资源文件的"属性"-"生成操作"设置为"嵌入的资源"）
            </summary>
            <param name="ResourceArray">字符串数组</param>
            <param name="ResourceName">资源文件名称（注意这个参数的值为资源文件在工程内的相对路径，例如A.jpg文件在Resources文件夹内，则此处的参数应为"Resources.A.jpg"）</param>
            <param name="Encoding">使用的编码格式（默认UTF-8）</param>
            <returns>是否读取成功</returns>
        </member>
        <member name="M:My.IO.ReadResourceArray(System.String[]@,System.String)">
            <summary>
            读取程序嵌入的字符串数组类型的资源文件（注意必须在解决方案资源管理器中，将资源文件的"属性"-"生成操作"设置为"嵌入的资源"）
            </summary>
            <param name="ResourceArray">字符串数组</param>
            <param name="ResourceName">资源文件名称（注意这个参数的值为资源文件在工程内的相对路径，例如A.jpg文件在Resources文件夹内，则此处的参数应为"Resources.A.jpg"）</param>
            <returns>是否读取成功</returns>
        </member>
        <member name="M:My.IO.ReadResourceArray(System.String[]@,System.String,System.Text.Encoding)">
            <summary>
            读取程序嵌入的字符串数组类型的资源文件（注意必须在解决方案资源管理器中，将资源文件的"属性"-"生成操作"设置为"嵌入的资源"）
            </summary>
            <param name="ResourceArray">字符串数组</param>
            <param name="ResourceName">资源文件名称（注意这个参数的值为资源文件在工程内的相对路径，例如A.jpg文件在Resources文件夹内，则此处的参数应为"Resources.A.jpg"）</param>
            <param name="Encoding">使用的编码格式（默认UTF-8）</param>
            <returns>是否读取成功</returns>
        </member>
        <member name="M:My.IO.CreatLinkFile(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            创建快捷方式
            </summary>
            <param name="TargetPath">快捷方式指向的路径（建议使用绝对路径，使用相对路径时，默认将以桌面作为父目录）</param>
            <param name="LinkFilePath">快捷方式文件的路径（可以是相对路径，如"1.lnk"）</param>
            <param name="Arguments">打开程序的参数（例如"/?"）</param>
            <param name="Description">鼠标悬停在快捷方式上的描述</param>
            <param name="WorkingDirectory">快捷方式的起始位置（不设置此参数时，按照系统默认，自动设置为快捷方式指向的路径的父目录）</param>
            <returns>是否创建成功</returns>
        </member>
        <member name="M:My.IO.ReadLinkFile(System.String@,System.String)">
            <summary>
            读取快捷方式指向的路径
            </summary>
            <param name="TargetPath">快捷方式指向的路径（获得完整的绝对路径）</param>
            <param name="LinkFilePath">快捷方式文件的路径（可以是相对路径，如"1.lnk"）</param>
            <returns>是否读取成功</returns>
        </member>
        <member name="T:My.StringData">
            <summary>
            字符串处理函数
            </summary>
        </member>
        <member name="M:My.StringData.SearchForward(System.String@,System.String,System.String)">
            <summary>
            搜索字符串（从第一个开始字符串的位置，向后搜寻结束字符串，取出中间的部分）
            </summary>
            <param name="SourceCode">要搜索的字符串</param>
            <param name="BeginString">开始字符串</param>
            <param name="EndString">结束字符串</param>
            <returns>搜索结果字符串（无结果时返回空字符串）</returns>
        </member>
        <member name="M:My.StringData.SearchBackward(System.String@,System.String,System.String)">
            <summary>
            搜索字符串（从最后一个结束字符串的位置，向前搜寻开始字符串，取出中间的部分）
            </summary>
            <param name="SourceCode">要搜索的字符串</param>
            <param name="BeginString">开始字符串</param>
            <param name="EndString">结束字符串</param>
            <returns>搜索结果字符串（无结果时返回空字符串）</returns>
        </member>
        <member name="M:My.StringData.SearchMiddle(System.String@,System.String,System.String)">
            <summary>
            搜索字符串（从第一个开始字符串的位置，向后搜寻最后一个结束字符串的位置，取出中间的部分）
            </summary>
            <param name="SourceCode">要搜索的字符串</param>
            <param name="BeginString">开始字符串</param>
            <param name="EndString">结束字符串</param>
            <returns>搜索结果字符串（无结果时返回空字符串）</returns>
        </member>
        <member name="M:My.StringData.SearchAllForward(System.String@,System.String,System.String)">
            <summary>
            搜索字符串（从第一个开始字符串的位置，向后搜寻结束字符串，取出中间的部分，重复向后搜索，返回数组）
            </summary>
            <param name="SourceCode">要搜索的字符串</param>
            <param name="BeginString">开始字符串</param>
            <param name="EndString">结束字符串</param>
            <returns>搜索结果字符串数组（无结果时返回空数组）</returns>
        </member>
        <member name="M:My.StringData.SearchAllBackward(System.String@,System.String,System.String)">
            <summary>
            搜索字符串（从最后一个结束字符串的位置，向前搜寻开始字符串，取出中间的部分，重复向前搜索，返回数组）
            </summary>
            <param name="SourceCode">要搜索的字符串</param>
            <param name="BeginString">开始字符串</param>
            <param name="EndString">结束字符串</param>
            <returns>搜索结果字符串数组（无结果时返回空数组）</returns>
        </member>
        <member name="M:My.StringData.SearchAllMiddle(System.String@,System.String,System.String)">
            <summary>
            搜索字符串（从第一个开始字符串的位置，向后搜寻最后一个结束字符串的位置，取出中间的部分，重复向中间搜索，返回数组）
            </summary>
            <param name="SourceCode">要搜索的字符串</param>
            <param name="BeginString">开始字符串</param>
            <param name="EndString">结束字符串</param>
            <returns>搜索结果字符串数组（无结果时返回空数组）</returns>
        </member>
        <member name="M:My.StringData.Intersect(System.Collections.ArrayList@,System.Collections.ArrayList@)">
            <summary>
            对两个字符串数组取交集（取出满足在第一个数组里，也在第二个数组里的元素）
            </summary>
            <param name="StringArray1">字符串数组</param>
            <param name="StringArray2">字符串数组</param>
            <returns>取出的元素的集合</returns>
        </member>
        <member name="M:My.StringData.Intersect(System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.String}@)">
            <summary>
            对两个字符串数组取交集（取出满足在第一个数组里，也在第二个数组里的元素）
            </summary>
            <param name="StringArray1">字符串数组</param>
            <param name="StringArray2">字符串数组</param>
            <returns>取出的元素的集合</returns>
        </member>
        <member name="M:My.StringData.Intersect(System.String[]@,System.String[]@)">
            <summary>
            对两个字符串数组取交集（取出满足在第一个数组里，也在第二个数组里的元素）
            </summary>
            <param name="StringArray1">字符串数组</param>
            <param name="StringArray2">字符串数组</param>
            <returns>取出的元素的集合</returns>
        </member>
        <member name="M:My.StringData.Union(System.Collections.ArrayList@,System.Collections.ArrayList@)">
            <summary>
            对两个字符串数组取并集（取出第一个数组里的元素，然后取出第二个数组里的元素）
            </summary>
            <param name="StringArray1">字符串数组</param>
            <param name="StringArray2">字符串数组</param>
            <returns>取出的元素的集合</returns>
        </member>
        <member name="M:My.StringData.Union(System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.String}@)">
            <summary>
            对两个字符串数组取并集（取出第一个数组里的元素，然后取出第二个数组里的元素）
            </summary>
            <param name="StringArray1">字符串数组</param>
            <param name="StringArray2">字符串数组</param>
            <returns>取出的元素的集合</returns>
        </member>
        <member name="M:My.StringData.Union(System.String[]@,System.String[]@)">
            <summary>
            对两个字符串数组取并集（取出第一个数组里的元素，然后取出第二个数组里的元素）
            </summary>
            <param name="StringArray1">字符串数组</param>
            <param name="StringArray2">字符串数组</param>
            <returns>取出的元素的集合</returns>
        </member>
        <member name="M:My.StringData.Except(System.Collections.ArrayList@,System.Collections.ArrayList@)">
            <summary>
            对两个字符串数组取差集（取出满足在第一个数组里，但是不在第二个数组里的元素）
            </summary>
            <param name="StringArray1">字符串数组</param>
            <param name="StringArray2">字符串数组</param>
            <returns>取出的元素的集合</returns>
        </member>
        <member name="M:My.StringData.Except(System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.String}@)">
            <summary>
            对两个字符串数组取差集（取出满足在第一个数组里，但是不在第二个数组里的元素）
            </summary>
            <param name="StringArray1">字符串数组</param>
            <param name="StringArray2">字符串数组</param>
            <returns>取出的元素的集合</returns>
        </member>
        <member name="M:My.StringData.Except(System.String[]@,System.String[]@)">
            <summary>
            对两个字符串数组取差集（取出满足在第一个数组里，但是不在第二个数组里的元素）
            </summary>
            <param name="StringArray1">字符串数组</param>
            <param name="StringArray2">字符串数组</param>
            <returns>取出的元素的集合</returns>
        </member>
        <member name="M:My.StringData.ChangeObjectToJson(System.Object@)">
            <summary>
            将一个对象转换为JSON字符串（必须为常见类型的数组对象，或是含有若干属性的自定义类的对象）
            </summary>
            <param name="JsonObject">含有JSON信息的对象（会识别是否为数组、会识别自定义的类的属性、会进行基本的字符串转义以保证满足JSON格式）</param>
            <returns>JSON字符串</returns>
        </member>
        <member name="T:My.HTML">
            <summary>
            HTML代码处理函数
            </summary>
        </member>
        <member name="M:My.HTML.GetTextByTagName(System.String,System.String)">
            <summary>
            获取网页源码中指定标签的元素的文本
            </summary>
            <param name="Source">网页源代码</param>
            <param name="HtmlTag">元素标签</param>
            <returns>文本字符串数组</returns>
        </member>
        <member name="M:My.HTML.GetTextById(System.String,System.String)">
            <summary>
            获取网页源码中指定ID的元素的文本
            </summary>
            <param name="Source">网页源代码</param>
            <param name="Id">元素ID</param>
            <returns>文本字符串</returns>
        </member>
        <member name="T:My.Computer">
            <summary>
            访问主机及其资源、服务和数据
            </summary>
        </member>
        <member name="M:My.Computer.ShutDown(System.Int32)">
            <summary>
            延时关闭计算机（注意会取代之前可能存在的关机计划）
            </summary>
            <param name="DelaySecond">延时时间（单位秒，最多可以延时10年）</param>
            <returns>是否执行成功</returns>
        </member>
        <member name="M:My.Computer.ShutDownReboot(System.Int32)">
            <summary>
            延时重启计算机（注意会取代之前可能存在的关机计划）
            </summary>
            <param name="DelaySecond">延时时间（单位秒，最多可以延时10年）</param>
            <returns>是否执行成功</returns>
        </member>
        <member name="M:My.Computer.ShutDownAbort">
            <summary>
            取消关机计划（没有关机计划时则无效果）
            </summary>
            <returns>是否执行成功</returns>
        </member>
        <member name="M:My.Computer.TaskRun(System.String)">
            <summary>
            打开指定的程序（多次调用本函数会打开程序的多个实例，新打开的程序会夺取鼠标焦点）
            </summary>
            <param name="TaskName">程序名称（例如"notepad"或"notepad.exe"）</param>
            <returns>是否执行成功</returns>
        </member>
        <member name="M:My.Computer.ShellRun(System.String)">
            <summary>
            打开指定的程序（多次调用本函数会打开程序的多个实例，新打开的程序不会夺取鼠标焦点）
            </summary>
            <param name="TaskName">程序名称（例如"notepad"或"notepad.exe"）</param>
            <returns>是否执行成功</returns>
        </member>
        <member name="M:My.Computer.Shell(System.String)">
            <summary>
            打开指定的命令行程序（多次调用本函数会打开程序的多个实例，新打开的程序不会夺取鼠标焦点）
            </summary>
            <param name="TaskName">完整的命令行语句（例如，应当使用"notepad.exe"而不是"notepad"）</param>
            <returns>是否执行成功</returns>
        </member>
        <member name="M:My.Computer.GetProcessFilePath(System.String)">
            <summary>
            通过进程的名称，获取进程的文件的完整路径（注意，该程序必须在运行中）
            </summary>
            <param name="ProcessName">程序名称（例如"notepad"或"notepad.exe"）</param>
            <returns>成功返回完整的文件路径，失败返回进程名称（例如"notepad.exe"）</returns>
        </member>
        <member name="M:My.Computer.TaskKill(System.String)">
            <summary>
            关闭指定的程序（程序如果有多个实例，会一并结束，多次调用本函数无特别效果）
            </summary>
            <param name="TaskName">程序名称（例如"notepad"或"notepad.exe"）</param>
            <returns>是否执行成功</returns>
        </member>
        <member name="M:My.Computer.ShellKill(System.String)">
            <summary>
            关闭指定的程序（程序如果有多个实例，会一并结束，多次调用本函数无特别效果）
            </summary>
            <param name="TaskName">程序名称（例如"notepad"或"notepad.exe"）</param>
            <returns>是否执行成功</returns>
        </member>
        <member name="M:My.Computer.SaveScreen">
            <summary>
            获取屏幕截图（System.Drawing.Bitmap类型）
            </summary>
            <returns>成功返回屏幕截图的Bitmap，失败返回新建的0*0像素的Bitmap</returns>
        </member>
        <member name="M:My.Computer.SaveScreen(System.Drawing.Rectangle)">
            <summary>
            获取指定区域的屏幕截图（System.Drawing.Bitmap类型）
            </summary>
            <param name="Position">指定区域</param>
            <returns>成功返回指定区域的屏幕截图的Bitmap，失败返回新建的Position.Width*Position.Height像素的Bitmap</returns>
        </member>
        <member name="M:My.Computer.SaveScreen(System.String)">
            <summary>
            获取屏幕截图（默认保存格式，实测1920*1080分辨率的截图文件大小为293K，文件大小中等）
            </summary>
            <param name="ScreenFilePath">截图文件保存路径</param>
            <returns>是否执行成功</returns>
        </member>
        <member name="M:My.Computer.SaveScreenBmp(System.String)">
            <summary>
            获取屏幕截图（bmp格式，实测1920*1080分辨率的截图文件大小为7.91M，文件大小最大）
            </summary>
            <param name="ScreenFilePath">截图文件保存路径</param>
            <returns>是否执行成功</returns>
        </member>
        <member name="M:My.Computer.SaveScreenPng(System.String)">
            <summary>
            获取屏幕截图（png格式，实测1920*1080分辨率的截图文件大小为293K，文件大小中等）
            </summary>
            <param name="ScreenFilePath">截图文件保存路径</param>
            <returns>是否执行成功</returns>
        </member>
        <member name="M:My.Computer.SaveScreenJpeg(System.String)">
            <summary>
            获取屏幕截图（jpeg格式，实测1920*1080分辨率的截图文件大小为212K，文件大小最小）
            </summary>
            <param name="ScreenFilePath">截图文件保存路径</param>
            <returns>是否执行成功</returns>
        </member>
        <member name="M:My.Computer.SaveScreenGif(System.String)">
            <summary>
            获取屏幕截图（gif格式，实测1920*1080分辨率的截图文件大小为232K，文件大小较小）
            </summary>
            <param name="ScreenFilePath">截图文件保存路径</param>
            <returns>是否执行成功</returns>
        </member>
        <member name="M:My.Computer.SaveScreenIcon(System.String)">
            <summary>
            获取屏幕截图（ico格式，实测1920*1080分辨率的截图文件大小为294K，文件大小中等）
            </summary>
            <param name="ScreenFilePath">截图文件保存路径</param>
            <returns>是否执行成功</returns>
        </member>
        <member name="M:My.Computer.SaveScreenTiff(System.String)">
            <summary>
            获取屏幕截图（tiff格式，实测1920*1080分辨率的截图文件大小为388K，文件大小较大）
            </summary>
            <param name="ScreenFilePath">截图文件保存路径</param>
            <returns>是否执行成功</returns>
        </member>
        <member name="M:My.Computer.SaveScreenExif(System.String)">
            <summary>
            获取屏幕截图（exif格式，实测1920*1080分辨率的截图文件大小为294K，文件大小中等）
            </summary>
            <param name="ScreenFilePath">截图文件保存路径</param>
            <returns>是否执行成功</returns>
        </member>
        <member name="M:My.Computer.SaveScreenMemoryBmp(System.String)">
            <summary>
            获取屏幕截图（memorybmp格式，实测1920*1080分辨率的截图文件大小为294K，文件大小中等）
            </summary>
            <param name="ScreenFilePath">截图文件保存路径</param>
            <returns>是否执行成功</returns>
        </member>
        <member name="M:My.Computer.SaveScreenEmf(System.String)">
            <summary>
            获取屏幕截图（emf格式，实测1920*1080分辨率的截图文件大小为293K，文件大小中等）
            </summary>
            <param name="ScreenFilePath">截图文件保存路径</param>
            <returns>是否执行成功</returns>
        </member>
        <member name="M:My.Computer.SaveScreenWmf(System.String)">
            <summary>
            获取屏幕截图（wmf格式，实测1920*1080分辨率的截图文件大小为293K，文件大小中等）
            </summary>
            <param name="ScreenFilePath">截图文件保存路径</param>
            <returns>是否执行成功</returns>
        </member>
        <member name="M:My.Computer.SaveScreenThumbnail(System.String)">
            <summary>
            获取屏幕缩略图（默认保存格式，实测1920*1080【长宽都只保留50%】分辨率，缩略图文件大小为157K，文件大小中等）
            </summary>
            <param name="ScreenFilePath">截图文件保存路径</param>
            <returns>是否执行成功</returns>
        </member>
        <member name="M:My.Computer.SaveScreenPngThumbnail(System.String)">
            <summary>
            获取屏幕缩略图（png格式，实测1920*1080【长宽都只保留50%】分辨率，缩略图文件大小为157K，文件大小中等）
            </summary>
            <param name="ScreenFilePath">截图文件保存路径</param>
            <returns>是否执行成功</returns>
        </member>
        <member name="M:My.Computer.SaveScreenJpegThumbnail(System.String)">
            <summary>
            获取屏幕缩略图（jpeg格式，实测1920*1080【长宽都只保留50%】分辨率，缩略图文件大小为64K，文件大小最小）
            </summary>
            <param name="ScreenFilePath">截图文件保存路径</param>
            <returns>是否执行成功</returns>
        </member>
        <member name="M:My.Computer.SendKeys(System.String)">
            <summary>
            发送按键（使用Microsoft.VisualBasic.Devices.Computer类的Keyboard.SendKeys方式）
            </summary>
            <param name="Keys">按键字符串（参照SendKeys的规则）</param>
            <returns>是否执行成功</returns>
        </member>
        <member name="M:My.Computer.SendKeysWshShell(System.String)">
            <summary>
            发送按键（使用Wscript.Shell的SendKeys方式）
            </summary>
            <param name="Keys">按键字符串（参照SendKeys的规则）</param>
            <returns>是否执行成功</returns>
        </member>
        <member name="M:My.Computer.SendKeysWinForm(System.String)">
            <summary>
            发送按键（使用System.Windows.Forms.SendKeys.Send方式）
            </summary>
            <param name="Keys">按键字符串（参照SendKeys的规则）</param>
            <returns>是否执行成功</returns>
        </member>
        <member name="M:My.Computer.PressKey(System.Windows.Forms.Keys)">
            <summary>
            按下单个按键（并保持按下状态直到下次按同一个键，连续调用本函数，可执行组合键）
            </summary>
            <param name="Key">键位</param>
            <returns>是否执行成功</returns>
        </member>
        <member name="M:My.Computer.PressKey(System.Char)">
            <summary>
            按下单个按键（并保持按下状态直到下次按同一个键，连续调用本函数，可执行组合键）
            </summary>
            <param name="KeyChar">键位</param>
            <returns>是否执行成功</returns>
        </member>
        <member name="M:My.Computer.PressKey(System.String)">
            <summary>
            按下多个按键（并保持按下状态直到下次按同一个键，连续调用本函数，可执行组合键）
            </summary>
            <param name="KeyString">键位（只允许字母和数字）</param>
            <returns>是否执行成功</returns>
        </member>
        <member name="M:My.Computer.ReleaseKey(System.Windows.Forms.Keys)">
            <summary>
            释放单个按键（取消按下状态）
            </summary>
            <param name="Key">键位</param>
            <returns>是否执行成功</returns>
        </member>
        <member name="M:My.Computer.ReleaseKey(System.Char)">
            <summary>
            释放单个按键（取消按下状态）
            </summary>
            <param name="KeyChar">键位</param>
            <returns>是否执行成功</returns>
        </member>
        <member name="M:My.Computer.ReleaseKey(System.String)">
            <summary>
            释放多个按键（取消按下状态）
            </summary>
            <param name="KeyString">键位（只允许字母和数字）</param>
            <returns>是否执行成功</returns>
        </member>
        <member name="M:My.Computer.MouseMoveByPixel(System.Int32,System.Int32)">
            <summary>
            将鼠标位置移动一段距离（移动距离单位为像素）
            </summary>
            <param name="x">横向距离</param>
            <param name="y">纵向距离</param>
            <returns>是否执行成功</returns>
        </member>
        <member name="M:My.Computer.MouseMoveByPercent(System.Double,System.Double)">
            <summary>
            将鼠标位置移动一段距离（移动距离单位为屏幕百分比）
            </summary>
            <param name="x">横向距离</param>
            <param name="y">纵向距离</param>
            <returns>是否执行成功</returns>
        </member>
        <member name="M:My.Computer.MouseMoveToPixel(System.Int32,System.Int32)">
            <summary>
            移动鼠标到指定位置（定位单位为像素）
            </summary>
            <param name="x">横坐标</param>
            <param name="y">纵坐标</param>
            <returns>是否执行成功</returns>
        </member>
        <member name="M:My.Computer.MouseMoveToPercent(System.Double,System.Double)">
            <summary>
            移动鼠标到指定位置（定位单位为屏幕百分比）
            </summary>
            <param name="x">横坐标</param>
            <param name="y">纵坐标</param>
            <returns>是否执行成功</returns>
        </member>
        <member name="M:My.Computer.MouseLeftDown">
            <summary>
            按下鼠标左键（保持按下状态）
            </summary>
            <returns>是否执行成功</returns>
        </member>
        <member name="M:My.Computer.MouseLeftUp">
            <summary>
            释放鼠标左键（取消按下状态）
            </summary>
            <returns>是否执行成功</returns>
        </member>
        <member name="M:My.Computer.MouseLeftClick">
            <summary>
            鼠标左键单击
            </summary>
            <returns>是否执行成功</returns>
        </member>
        <member name="M:My.Computer.MouseLeftDoubleClick">
            <summary>
            鼠标左键双击
            </summary>
            <returns>是否执行成功</returns>
        </member>
        <member name="M:My.Computer.MouseMiddleDown">
            <summary>
            按下鼠标中键（保持按下状态）
            </summary>
            <returns>是否执行成功</returns>
        </member>
        <member name="M:My.Computer.MouseMiddleUp">
            <summary>
            释放鼠标中键（取消按下状态）
            </summary>
            <returns>是否执行成功</returns>
        </member>
        <member name="M:My.Computer.MouseMiddleClick">
            <summary>
            鼠标中键单击
            </summary>
            <returns>是否执行成功</returns>
        </member>
        <member name="M:My.Computer.MouseMiddleDoubleClick">
            <summary>
            鼠标中键双击
            </summary>
            <returns>是否执行成功</returns>
        </member>
        <member name="M:My.Computer.MouseRightDown">
            <summary>
            按下鼠标右键（保持按下状态）
            </summary>
            <returns>是否执行成功</returns>
        </member>
        <member name="M:My.Computer.MouseRightUp">
            <summary>
            释放鼠标右键（取消按下状态）
            </summary>
            <returns>是否执行成功</returns>
        </member>
        <member name="M:My.Computer.MouseRightClick">
            <summary>
            鼠标右键单击
            </summary>
            <returns>是否执行成功</returns>
        </member>
        <member name="M:My.Computer.MouseRightDoubleClick">
            <summary>
            鼠标右键双击
            </summary>
            <returns>是否执行成功</returns>
        </member>
        <member name="M:My.Computer.MouseWheelUp(System.Int32)">
            <summary>
            鼠标滚轮向上滚动（滚动距离单位为像素）
            </summary>
            <param name="ScrollValue">滚动距离</param>
            <returns>是否执行成功</returns>
        </member>
        <member name="M:My.Computer.MouseWheelDown(System.Int32)">
            <summary>
            鼠标滚轮向下滚动（滚动距离单位为像素）
            </summary>
            <param name="ScrollValue">滚动距离</param>
            <returns>是否执行成功</returns>
        </member>
        <member name="M:My.Computer.KeyBeingPressed(System.Windows.Forms.Keys)">
            <summary>
            判断物理键盘设备上的单个键位是否正处于被按下的状态（侦测键盘的硬件中断）
            </summary>
            <param name="Key">键位</param>
            <returns>是否按下</returns>
        </member>
        <member name="M:My.Computer.KeyBeingPressed(System.Char)">
            <summary>
            判断物理键盘设备上的单个键位是否正处于被按下的状态（侦测键盘的硬件中断）
            </summary>
            <param name="KeyChar">键位</param>
            <returns>是否按下</returns>
        </member>
        <member name="M:My.Computer.KeyBeingPressed(System.String)">
            <summary>
            判断物理键盘设备上的多个键位是否都处于被按下的状态（侦测键盘的硬件中断）
            </summary>
            <param name="KeyString">键位（只允许字母和数字）</param>
            <returns>是否按下</returns>
        </member>
        <member name="M:My.Computer.FindWindow(System.String)">
            <summary>
            根据窗口标题获取窗口的大小和位置（当多个标题相同的窗体存在时，默认获取上一个活动的窗体）
            </summary>
            <param name="WindowTitle">窗口标题（字符串不能有任何差别）</param>
            <returns>窗口的大小和位置（System.Drawing.Rectangle）</returns>
        </member>
        <member name="M:My.Computer.FindFocusWindow">
            <summary>
            获取当前的焦点窗口的大小和位置
            </summary>
            <returns>窗口的大小和位置（System.Drawing.Rectangle）</returns>
        </member>
        <member name="M:My.Computer.FindFocusWindowTitle">
            <summary>
            获取当前的焦点窗口的窗口标题文字
            </summary>
            <returns>窗口标题文字（失败则返回空字符串""）</returns>
        </member>
        <member name="M:My.Computer.SetForegroundWindow(System.String)">
            <summary>
            根据窗口标题获取窗口，并将其设置为当前的焦点窗口（实测：窗体处于最小化状态时，不会弹出到最前，只会在任务栏出现白色闪烁效果；窗体处于普通状态时，不一定会弹出到最前，可能只在任务栏出现黄色闪烁效果）
            </summary>
            <param name="WindowTitle">窗口标题（字符串不能有任何差别）</param>
            <returns>设置成功返回非0值，失败返回0</returns>
        </member>
        <member name="M:My.Computer.SetWindowCanRedraw(System.String)">
            <summary>
            根据窗口标题获取窗口，并允许窗口重绘
            </summary>
            <param name="WindowTitle">窗口标题（字符串不能有任何差别）</param>
            <returns>设置成功返回非0值，失败返回0</returns>
        </member>
        <member name="M:My.Computer.SetWindowCanNotRedraw(System.String)">
            <summary>
            根据窗口标题获取窗口，并禁止窗口重绘
            </summary>
            <param name="WindowTitle">窗口标题（字符串不能有任何差别）</param>
            <returns>设置成功返回非0值，失败返回0</returns>
        </member>
        <member name="M:My.Computer.ShowWindowNormal(System.String)">
            <summary>
            根据窗口标题获取窗口，并将其设置为普通样式（取消最大化、最小化效果。实测：如果窗体当前为不可重绘的状态，则会恢复为可重绘的状态，但是函数会返回false。）
            </summary>
            <param name="WindowTitle">窗口标题（字符串不能有任何差别）</param>
            <returns>是否设置成功</returns>
        </member>
        <member name="M:My.Computer.ShowWindowMinimize(System.String)">
            <summary>
            根据窗口标题获取窗口，并将其设置为最小化样式
            </summary>
            <param name="WindowTitle">窗口标题（字符串不能有任何差别）</param>
            <returns>是否设置成功</returns>
        </member>
        <member name="M:My.Computer.ShowWindowMaximize(System.String)">
            <summary>
            根据窗口标题获取窗口，并将其设置为最大化样式
            </summary>
            <param name="WindowTitle">窗口标题（字符串不能有任何差别）</param>
            <returns>是否设置成功</returns>
        </member>
        <member name="M:My.Computer.MoveWindow(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            根据窗口标题修改窗口的位置和大小（当多个标题相同的窗体存在时，默认修改上一个活动的窗体；注意可能会把窗口移动到用户鼠标无法触及的位置）
            </summary>
            <param name="WindowTitle">窗口标题（字符串不能有任何差别）</param>
            <param name="Left">屏幕左边距</param>
            <param name="Top">屏幕上边距</param>
            <param name="Width">宽度 </param>
            <param name="Height">高度</param>
            <returns>是否修改成功</returns>
        </member>
        <member name="M:My.Computer.MoveWindow(System.String,System.Drawing.Rectangle)">
            <summary>
            根据窗口标题修改窗口的位置和大小（当多个标题相同的窗体存在时，默认修改上一个活动的窗体；注意可能会把窗口移动到用户鼠标无法触及的位置）
            </summary>
            <param name="WindowTitle">窗口标题（字符串不能有任何差别）</param>
            <param name="Position">指定区域</param>
            <returns>是否修改成功</returns>
        </member>
        <member name="M:My.Computer.DragWindow(System.String,System.Int32,System.Int32)">
            <summary>
            根据窗口标题拖动窗口（当多个标题相同的窗体存在时，默认修改上一个活动的窗体；注意可能会把窗口移动到用户鼠标无法触及的位置）
            </summary>
            <param name="WindowTitle">窗口标题（字符串不能有任何差别）</param>
            <param name="MoveX">向右拖动的距离（为负值则向左拖动）</param>
            <param name="MoveY">向下拖动的距离（为负值则向上拖动）</param>
            <returns>是否拖动成功</returns>
        </member>
        <member name="M:My.Computer.ResizeWindow(System.String,System.Int32,System.Int32)">
            <summary>
            根据窗口标题修改窗口的大小（当多个标题相同的窗体存在时，默认修改上一个活动的窗体；注意某些程序的窗口大小，实际上不能被修改的太小）
            </summary>
            <param name="WindowTitle">窗口标题（字符串不能有任何差别）</param>
            <param name="Width">宽度</param>
            <param name="Height">高度</param>
            <returns>是否修改成功</returns>
        </member>
        <member name="M:My.Computer.MouseMove(System.Int32,System.Int32)">
            <summary>
            将鼠标位置移动一段距离（移动距离单位为像素，使用System.Windows.Forms.Cursor）
            </summary>
            <param name="x">横向距离</param>
            <param name="y">纵向距离</param>
            <returns>是否执行成功</returns>
        </member>
        <member name="M:My.Computer.MousePosition">
            <summary>
            获取鼠标的当前位置（System.Windows.Forms.Cursor.Position）
            </summary>
            <returns>位置坐标（System.Drawing.Point）</returns>
        </member>
        <member name="M:My.Computer.MousePositionColor">
            <summary>
            获取鼠标的当前位置的屏幕颜色
            </summary>
            <returns>颜色值（System.Drawing.Color）</returns>
        </member>
        <member name="M:My.Computer.ShowDesktop">
            <summary>
            强制把所有运行的程序窗口最小化，显示桌面（效果类似Win7系统鼠标点击屏幕右下角）
            </summary>
            <returns>是否执行成功</returns>
        </member>
        <member name="M:My.Computer.Win32ErrorCode">
            <summary>
            获取上一个Win32 API调用产生的错误代码（实测：出现错误后，错误信息会一直保留，直到被下一个错误信息替换）
            </summary>
            <returns>错误代码（默认为0）</returns>
        </member>
        <member name="M:My.Computer.Win32ErrorMessage">
            <summary>
            获取上一个Win32 API调用产生的错误说明（实测：出现错误后，错误信息会一直保留，直到被下一个错误信息替换）
            </summary>
            <returns>错误说明（默认为"操作成功完成。"）</returns>
        </member>
        <member name="T:LOL自动挂机.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:LOL自动挂机.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:LOL自动挂机.Properties.Resources.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
    </members>
</doc>
